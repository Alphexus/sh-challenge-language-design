local abstract_node = require("compiler.ast.abstract-node")

return function(test)
	local node = abstract_node.new()
	test:invoke_fail(node.accept, node)
	test:invoke_fail(node.is_statement, node)
	test:invoke_fail(node.is_expression, node)
	test:equal(node:type(), abstract_node)
	local copy = test:invoke_pass(node.copy, node)

	for key, value in pairs(copy) do
		test:equal(value, node[key])
	end

	for key, value in pairs(node) do
		test:equal(value, copy[key])
	end

	local firstLine, lastLine = test:invoke_pass(node.line, node)
	test:equal(firstLine, 0)
	test:equal(lastLine, 0)
	local firstColumn, lastColumn = test:invoke_pass(node.column, node)
	test:equal(firstColumn, 0)
	test:equal(lastColumn, 0)
	local firstPosition, lastPosition = test:invoke_pass(node.position, node)
	test:equal(firstPosition, 0)
	test:equal(lastPosition, 0)
	test:invoke_fail(node.set_line, node)
	test:invoke_fail(node.set_line, node, 0)
	test:invoke_fail(node.set_line, node, 0, 0)
	test:invoke_fail(node.set_line, node, 5, 4)
	test:invoke_fail(node.set_line, node, 2^33, 1)
	test:invoke_fail(node.set_line, node, 1, 2^33)
	firstLine, lastLine = test:invoke_pass(node.line, node)
	test:equal(firstLine, 0)
	test:equal(lastLine, 0)
	test:invoke_pass(node.set_line, node, 1, 1)
	firstLine, lastLine = test:invoke_pass(node.line, node)
	test:equal(firstLine, 1)
	test:equal(lastLine, 1)
	test:invoke_pass(node.set_line, node, 1, 3)
	firstLine, lastLine = test:invoke_pass(node.line, node)
	test:equal(firstLine, 1)
	test:equal(lastLine, 3)
	test:invoke_fail(node.set_column, node)
	test:invoke_fail(node.set_column, node, 0)
	test:invoke_fail(node.set_column, node, 0, 0)
	test:invoke_pass(node.set_line, node, 1, 1)
	test:invoke_fail(node.set_column, node, 5, 4)
	test:invoke_fail(node.set_column, node, 2^33, 1)
	test:invoke_fail(node.set_column, node, 1, 2^33)
	firstColumn, lastColumn = test:invoke_pass(node.column, node)
	test:equal(firstColumn, 0)
	test:equal(lastColumn, 0)
	test:invoke_pass(node.set_line, node, 1, 2)
	test:invoke_pass(node.set_column, node, 5, 4)
	firstColumn, lastColumn = test:invoke_pass(node.column, node)
	test:equal(firstColumn, 5)
	test:equal(lastColumn, 4)
	test:invoke_pass(node.set_column, node, 1, 1)
	firstColumn, lastColumn = test:invoke_pass(node.column, node)
	test:equal(firstColumn, 1)
	test:equal(lastColumn, 1)
	test:invoke_pass(node.set_column, node, 1, 3)
	firstColumn, lastColumn = test:invoke_pass(node.column, node)
	test:equal(firstColumn, 1)
	test:equal(lastColumn, 3)
	test:invoke_fail(node.set_position, node)
	test:invoke_fail(node.set_position, node, 0)
	test:invoke_fail(node.set_position, node, 0, -1)
	test:invoke_fail(node.set_position, node, 5, 4)
	test:invoke_fail(node.set_position, node, 2^33, 1)
	test:invoke_fail(node.set_position, node, 1, 2^33)
	firstPosition, lastPosition = test:invoke_pass(node.position, node)
	test:equal(firstPosition, 0)
	test:equal(lastPosition, 0)
	test:invoke_pass(node.set_position, node, 0, 0)
	firstPosition, lastPosition = test:invoke_pass(node.position, node)
	test:equal(firstPosition, 0)
	test:equal(lastPosition, 0)
	test:invoke_pass(node.set_position, node, 1, 3)
	firstPosition, lastPosition = test:invoke_pass(node.position, node)
	test:equal(firstPosition, 1)
	test:equal(lastPosition, 3)
end
